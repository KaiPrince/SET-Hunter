TODO:
Assignment:
- Make score update based on time.
- Add score lockout for 3 seconds after leaving road.
- Prevent player from getting stuck in death loop in bottom middle of screen.

For Fun:
- Cleanup terrain classes by using type object pattern.
- Use prototypes pattern to create enemies.
- Smooth road flow.
- Implement Visitor or strategy pattern to player or level.
	- Remove GetType() method and enums
- Move collision detection and score accumulation out of PlayerState
- Move setX and setY validation logic out of player class.
- Create world class, which is an aggregation of gameBoard and all gameObjects.
	- used by physics component.
- Remove references of GameBoard from Square class
- Replace all nullptr assets with _emptyAsset
	- rename to nullAsset?
- Convert collisionObject to a vector array. Handle more than one collision at once.
- Change trees and shrubs to be GameObjects instead of squares
- Change Gameboard->FindSquare function to search by column and then row, rather than looping.
- Change DrawableAssets to not use an assetfactory. Just let assets be singletons/flyweights and create with new.
- Change all GameBoard references to World or World->GetGameBoard();
- Explicit dependencies principle. Don't allow objects to be created in invalid states.
	- Create overloaded constructors. Use Null objects
	- Player class with physics and input component
- In GameLevel Update calls, use World->Update()
- Rename Visitor and Observable to IVisitor and IObservable
- Move Player to World->GameObjects
- Replace GameObject with IGameObject
- Change Observer Notify() to use visitor pattern?
- Make AssetFactory track and delete all its assets.
- Change spritesheet in update method or state enter method or create state draw method.